# Feedback

Group asparagus: huangy18, suny65

Commit hash: 5a36cef45467b06b4d0d255e899b6a7257084130

Raw score: 56 / 60

## Checkstyle

Score: 5 / 5

## ArrayDisjointSet

Score: 16 / 20

-   FAIL: (weight=0.5) testUnionSameSet
        Description: Tests whether unioning two items in the same set correctly does nothing.
            (Causing an item to point to itself or one of its children will likely result in a stack
            overflow or timeout due to infinite recursion or infinite looping.)
        org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds
        	at datastructures.concrete.ArrayDisjointSet.findSet(ArrayDisjointSet.java:56)
        	at secret.TestSecretArrayDisjointSet.testUnionSameSet(TestSecretArrayDisjointSet.java:211)
        	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   FAIL: (weight=1.0) testPathCompression
        Description: Uses reflection to test that you have implemented the path compression
            optimization correctly.
        java.lang.AssertionError: expected:<0> but was:<14>
        	at org.junit.Assert.fail(Assert.java:88)
        	at org.junit.Assert.failNotEquals(Assert.java:834)
        	at org.junit.Assert.assertEquals(Assert.java:118)
        	at org.junit.Assert.assertEquals(Assert.java:144)
        	at misc.BaseTest.assertEquals(BaseTest.java:24)
        	at secret.TestSecretArrayDisjointSet.testPathCompression(TestSecretArrayDisjointSet.java:163)
        	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   PASS: (weight=1.0) testInternalStructure
        Description: Uses reflection to test that the internal state of your data structure is
            correct for a small dataset (<10 items) after several unions.

-   PASS: (weight=1.0) testDegenerateUnions
        Description: Tests the runtime of your data structure when unions create degenerate sets
            (similar to a linked list).

-   FAIL: (weight=0.5) testUnionSelf
        Description: Tests whether unioning an item with itself correctly does nothing.
        org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds
        	at datastructures.concrete.ArrayDisjointSet.findSet(ArrayDisjointSet.java:56)
        	at secret.TestSecretArrayDisjointSet.testUnionSelf(TestSecretArrayDisjointSet.java:241)
        	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   PASS: (weight=1.0) testUnionSimple
-   PASS: (weight=1.0) testUnionUnequalTrees
-   PASS: (weight=1.0) testIllegalUnionThrowsException
-   PASS: (weight=1.0) testLargeForest
-   PASS: (weight=1.0) testIllegalFindSet
-   PASS: (weight=1.0) testMakeSetAndFindSetSimple

## Graph

Score: 20 / 20

-   PASS: (weight=2.0) testFindingShortestPathWithLongPath
        Description: Tests the efficiency of finding a shortest path when the shortest path is very
            long (order of magnitude 1000 edges long).

-   PASS: (weight=1.0) testFindingShortestPathWithNonIntegerWeights
        Description: Tests whether finding shortest paths works correctly when some paths differ in
            cost by less than 1.

-   PASS: (weight=2.0) testFindingShortestPathUpdatesShortestPath
        Description: Tests whether finding shortest paths correctly updates the heap while running
            Dijkstra's algorithm by using a graph that will produce incorrect results otherwise
            (e.g., if elements in the heap are mutated).

-   PASS: (weight=2.0) testFindingShortestPathOnRandomGraphs
        Description: Tests the runtime of finding shortest paths on several random graphs (order of
            magnitude 10,000 vertices, each with only a few edges).

-   PASS: (weight=1.0) testGraphWithBadEdgeNotPermitted
-   PASS: (weight=1.0) testFindingShortestPathSameStartAndEnd
-   PASS: (weight=1.0) testFindingMst
-   PASS: (weight=1.0) testFindingShortestPathComplex
-   PASS: (weight=1.0) testFindingShortestPathSimple
-   PASS: (weight=1.0) testFindingShortestPathDisconnectedComponents
-   PASS: (weight=1.0) testSizeMethods
-   PASS: (weight=1.0) testGraphWithNegativeEdgesNotPermitted

## KruskalMazeCarver

Score: 15 / 15

-   PASS: (weight=1.0) testCarverReturnsViableMST
-   PASS: (weight=1.5) testGeneratesSolvableMaze
-   PASS: (weight=1.5) testResultIsRandom
-   PASS: (weight=1.0) testCarverDoesNotMutateMaze
